spring.application.name=jsp-betting-game
server.port=8005
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
spring.jpa.show-sql=true
#data source url
spring.datasource.url=jdbc:mysql://localhost:3306/betting
spring.datasource.username=root
spring.datasource.password=1234
spring.jpa.hibernate.ddl-auto=update
spring.jackson.serialization.write-dates-as-timestamps: false

spring.kafka.consumer.bootstrap-servers:localhost:9092
spring.kafka.consumer.group-id:bettingGroup
spring.kafka.consumer.auto-offset-reset: earliest
spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#kafka consumer can desrialize all the classes from this package
spring.kafka.consumer.properties.spring.json.trusted.packages=*

spring.kafka.producer.bootstrap-servers: localhost:9092
spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer: org.apache.kafka.common.serialization.StringSerializer
#producer convert java object into json and it will write to the kafka topic
spring.kafka.producer.value-serializer: org.springframework.kafka.support.serializer.JsonSerializer




